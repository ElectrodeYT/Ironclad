--  ironclad.gpr: Project's building script.
--  Copyright (C) 2021 streaksu
--
--  This program is free software: you can redistribute it and/or modify
--  it under the terms of the GNU General Public License as published by
--  the Free Software Foundation, either version 3 of the License, or
--  (at your option) any later version.
--
--  This program is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with this program.  If not, see <http://www.gnu.org/licenses/>.

project Ironclad is
   --  Get command-line options for flags and boards.
   type Arch_Name    is ("x86_64-stivale2", "aarch64-stivale2");
   type Target_Name  is ("big", "small");
   type Alloc_Scheme is ("standard", "alloconly");
   Arch   : Arch_Name    := External ("ARCH",   "x86_64-stivale2");
   Target : Target_Name  := External ("TARGET", "big");
   Alloc  : Alloc_Scheme := External ("ALLOC_SCHEME", "standard");

   Ada_Flags    := External ("ADAFLAGS", "-O2 -g -gnaty -Wall -fdata-sections");
   Asm_Flags    := External ("ASMFLAGS", "-O2 -g -Wall");
   Linker_Flags := External ("LDFLAGS",  "-O2 -g -Wl,-gc-sections");

   --  Set directories and files.
   for Source_Dirs use (
      "source", "source/devices", "source/lib", "source/memory",
      "source/networking", "source/userland", "source/vfs",
      "source/arch", "source/arch/" & Arch, "source/memory/" & Alloc
   );
   for Object_Dir use "obj";
   for Exec_Dir use ".";
   for Main use ("main.adb");
   for Languages use ("ada", "asm");
   for Create_Missing_Dirs use "True";

   package Naming is
      for Body_Suffix ("asm") use ".S";
   end Naming;

   package Builder is
      for Executable ("main.adb") use "ironclad";
   end Builder;

   package Compiler is
      Base_Ada_Switches := Split (Ada_Flags, " ") & (
         "-fno-stack-protector", "-fno-stack-check"
      );
      Base_Asm_Switches := Split (Asm_Flags, " ");
      case Target is
         when "big" =>
            Base_Ada_Switches := Base_Ada_Switches & ("-gnateDIsSmall=False");
         when "small" =>
            Base_Ada_Switches := Base_Ada_Switches & ("-gnateDIsSmall=True");
            Base_Asm_Switches := Base_Asm_Switches & ("-DSMALL");
      end case;

      case Arch is
         when "x86_64-stivale2" =>
            for Switches ("Ada") use Base_Ada_Switches & (
               "-fpie", "-mno-sse", "-mno-sse2", "-mno-red-zone"
            );
            for Switches ("Asm") use Base_Asm_Switches & (
               "-fpie"
            );
         when "aarch64-stivale2" =>
            for Switches ("Ada") use Base_Ada_Switches & (
               "-mgeneral-regs-only", "-static", "-fno-pie", "-fno-pic"
            );

            --  This following lines are needed on my system, but they are not
            --  required on others like debian, however it should not hurt.
            for Switches ("Asm") use Base_Asm_Switches;
            for Driver ("asm") use "GCC";
            for Leading_Required_Switches ("asm") use ("-xassembler-with-cpp");
      end case;

      for Local_Configuration_Pragmas use "source/pragmas.adc";
   end Compiler;

   package Linker is
      Base_Link_Switches := Split (Linker_Flags, " ") & (
         "-T../source/arch/" & Arch & "/linker.ld", "-nostdlib",
         "-znoexecstack", "-lgcc"
      );

      case Arch is
         when "x86_64-stivale2" =>
            for Switches ("Ada") use Base_Link_Switches & (
               "-pie", "-zmax-page-size=0x1000",
               "-Wl,--undefined=stivale2hdr,-zmuldefs"
            );
         when "aarch64-stivale2" =>
            for Switches ("Ada") use Base_Link_Switches & (
               "-zmax-page-size=0x1000", "-static", "-Wl,-zmuldefs",
               "-fno-pie", "-fno-pic"
            );
      end case;
   end Linker;
end Ironclad;
