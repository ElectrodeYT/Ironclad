Ironclad is a partially formally verified real-time kernel, with a small
footprint, for general-purpose and embedded OSes, written in SPARK and Ada.

Some of the supported features are:
- A familiar POSIX-compatible interface
- True simultaneous multitasking
- Complex virtual and physical memory support, VFS support
- Resiliency and small footprint
- Partial gold-level formal verification
- Advanced cryptography and a security-centered architecture
- Hard real-time scheduling and real-time oriented features

For more information about the project, check https://nongnu.org/ironclad

-- Documentation --

The project features info and PDF files generated from the texinfo source in
the docs subdirectory, and they are generated and installed automatically when
running ./install.sh.

The generated documentation features information about a lot of kernel-specific
concepts along with syscall listings and project information.

Generated documentation is hosted and updated regularly online at:
https://www.nongnu.org/ironclad/manual/ - HTML format.
https://www.nongnu.org/ironclad/manual/ironclad.pdf - PDF format.

-- Building and testing --

The tools needed are:

- dialog for the configuration menu.
- gprbuild for compilation.
- A compatible Ada compiler, and an assembler for the desired architecture.
- GNU Info for building the documentation with Info and PDF support.
- gnatprove for formal verification, if desired.

For building the project's binaries, configure and then use gprbuild like the
following:

./configure.sh
gprbuild -p ironclad.gpr -j4

./configure.sh will generate an ironclad.gpr with the selected options, for doing
several builds with the same options, just save the ironclad.gpr, and skip the
step next time.

A shell script called 'install.sh' is provided for installing the resulting
binaries and generating the project's documentation in PDF and Info formats.

Several flags and environment variables are available for 'install.sh':

- DESTDIR and PREFIX.
- Pass 'strip' as the only argument for stripping binaries.

To run the formal proofing framework, which is not necessary, one can run:

gnatprove -P ironclad.gpr -U --prover=cvc4,altergo,z3 --mode=all -j4

-- Thanks to --

- Mintsuki (https://github.com/mintsuki) et al - For the
Limine (https://github.com/limine-bootloader/limine) project, used for testing
and code reference.

- The managarm project (https://github.com/managarm), used for code
reference for the aarch64 port, and Qookie, one of the maintainers, for help
debugging.

- The FlorenceOS project (https://github.com/FlorenceOS) for code reference
for the aarch64 MMU, and N00byEdge, one of the maintainers, for help
debugging the obscure and esoteric issues.

========================================================================

Copyright (C) 2022 streaksu

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the "GNU Free
Documentation License" file as part of this distribution.
